-- {
--   "JuanZoran/Trans.nvim",
--   -- run = 'bash ./install.sh',
--   -- https://github.com/skywind3000/ECDICT-ultimate/releases/download/1.0.0/ecdict-ultimate-sqlite.zip
--   keys = {
--     -- 可以换成其他你想映射的键
--     { "tt", mode = { "n", "x" }, "<Cmd>Translate<CR>", desc = " Translate" },
--     { "ts", mode = { "n", "x" }, "<Cmd>TransPlay<CR>", desc = " 自动发音" },
--
--     -- 目前这个功能的视窗还没有做好，可以在配置里将view.i改成hover
--     -- { 'mi', '<Cmd>TranslateInput<CR>', desc = ' Translate From Input' },
--   },
--   dependencies = { "kkharji/sqlite.lua", lazy = true },
--   opts = {
--     -- your configuration there
--   },
--   config = function()
--     require("Trans").setup {
--       db_path = "$HOME/.dotfiles/nvim/ultimate.db",
--     }
--   end,
-- },

-- {
--   "hjkl01/translate.nvim",
--   cmd = "Translate",
--   lazy = false,
--   init = require("core.utils").load_mappings "translate",
--   config = function()
--     require("translate").setup {}
--   end,
-- },

-- {
--   "folke/tokyonight.nvim",
--   lazy = false,
--   priority = 1000,
--   config = function()
--     require "plugins.configs.colorscheme"
--   end,
-- },

-- local present, color_config = pcall(require, "tokyonight")
--
-- if not present then
--   return
-- end
--
-- local options = {
--   -- your configuration comes here
--   -- or leave it empty to use the default settings
--   style = "day",          -- The theme comes in three styles, `storm`, `moon`, a darker variant `night` and `day`
--   light_style = "day",    -- The theme is used when the background is set to light
--   transparent = false,    -- Enable this to disable setting the background color
--   terminal_colors = true, -- Configure the colors used when opening a `:terminal` in Neovim
--   styles = {
--     -- Style to be applied to different syntax groups
--     -- Value is any valid attr-list value for `:help nvim_set_hl`
--     comments = { italic = true },
--     keywords = { italic = true },
--     functions = { italic = true },
--     variables = {},
--     -- Background styles. Can be "dark", "transparent" or "normal"
--     sidebars = "dark",             -- style for sidebars, see below
--     floats = "dark",               -- style for floating windows
--   },
--   sidebars = { "qf", "help" },     -- Set a darker background on sidebar-like windows. For example: `["qf", "vista_kind", "terminal", "packer"]`
--   day_brightness = 0.3,            -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors
--   hide_inactive_statusline = true, -- Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard **StatusLine** and **LuaLine**.
--   dim_inactive = false,            -- dims inactive windows
--   lualine_bold = true,             -- When `true`, section headers in the lualine theme will be bold
--   --- You can override specific color groups to use other groups or a hex color
--   --- function will be called with a ColorScheme table
--   ---@param colors ColorScheme
--   on_colors = function(colors) end,
--   --- You can override specific highlights to use other groups or a hex color
--   --- function will be called with a Highlights and ColorScheme table
--   --- @param highlights Highlights
--   --- @param colors ColorScheme
--   on_highlights = function(highlights, colors)
--     highlights.LineNr = {
--       bg = "#000000",
--     }
--   end,
--   -- },
-- }
--
-- color_config.setup(options)
-- vim.cmd [[ colorscheme tokyonight-moon ]]
--
--
-- lazy.nvim
-- {
--   "folke/noice.nvim",
--   event = "VeryLazy",
--   opts = {
--     -- add any options here
--   },
--   dependencies = {
--     -- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
--     "MunifTanjim/nui.nvim",
--     -- OPTIONAL:
--     --   `nvim-notify` is only needed, if you want to use the notification view.
--     --   If not available, we use `mini` as the fallback
--     "rcarriga/nvim-notify",
--   },
--   config = function()
--     require "plugins.configs.noice"
--   end,
-- },


-- {
--   "jose-elias-alvarez/null-ls.nvim",
--   lazy = false,
--   after = "nvim-lspconfig",
--   config = function()
--     require "plugins.configs.nullls"
--   end,
-- },
--
-- local present, null_ls = pcall(require, "null-ls")
--
-- if not present then
--   return
-- end
--
-- local b = null_ls.builtins
--
-- local sources = {
--
--   -- webdev stuff
--   -- b.formatting.deno_fmt,
--   b.formatting.prettier,
--
--   -- Lua
--   b.formatting.stylua,
--
--   -- Python
--   b.formatting.black.with {
--     extra_args = { "--line-length=120" },
--   },
--
--   -- Shell
--   b.formatting.shfmt,
--   b.diagnostics.shellcheck.with { diagnostics_format = "#{m} [#{c}]" },
-- }
-- local augroup = vim.api.nvim_create_augroup("LspFormatting", {})
--
-- null_ls.setup {
--   debug = true,
--   sources = sources,
--   on_attach = function(client, bufnr)
--     if client.supports_method "textDocument/formatting" then
--       vim.api.nvim_clear_autocmds { group = augroup, buffer = bufnr }
--       vim.api.nvim_create_autocmd("BufWritePre", {
--         group = augroup,
--         buffer = bufnr,
--         callback = function()
--           -- on 0.8, you should use vim.lsp.buf.format({ bufnr = bufnr }) instead
--           -- vim.lsp.buf.formatting_sync()
--           vim.lsp.buf.format { bufnr = bufnr }
--         end,
--       })
--     end
--   end,
-- }
